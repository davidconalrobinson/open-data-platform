---
# Default values for airflow.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#
# For a complete list of parameters that can be set from this file refer to:
# https://github.com/apache/airflow/blob/helm-chart/1.11.0/chart/values.yaml
ingress:
  web:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "<this value is overriden by terraform/helm_releases.tf>"
      kubernetes.io/ingress.class: "nginx"
    pathType: "Prefix"
    hosts:
      - tls:
          enabled: true
          secretName: "<this value is overriden by terraform/helm_releases.tf>"
    ingressClassName: "nginx"
config:
  webserver:
    authenticate: true
    auth_backend: airflow.contrib.auth.backends.github_enterprise_auth
  github_enterprise:
    host: github.com
    client_id: "<this value is overriden by terraform/helm_releases.tf>"
    client_secret: "<this value is overriden by terraform/helm_releases.tf>"
    oauth_callback_route: /oauth/callback
extraEnv: "<this value is overriden by terraform/helm_releases.tf>"
webserver:
  defaultUser:
    enabled: false
  webserverConfig: |
    from airflow.configuration import conf
    from airflow.www.security import AirflowSecurityManager
    from flask_appbuilder.security.manager import AUTH_OAUTH
    import os
    import json
    import logging


    AUTH_TYPE = AUTH_OAUTH
    AUTH_ROLES_SYNC_AT_LOGIN = True   # Sync roles on every login
    AUTH_USER_REGISTRATION = True     # Allow users to self register
    AUTH_USER_REGISTRATION_ROLE = "Public"  # Default role for self-registered users
    AUTH_ROLES_MAPPING = {
        "admin": ["Admin"],
        "engineer": ["Op"],
        "scientist": ["User"],
        "analyst": ["User"]
    }
    RBAC = json.loads(os.environ.get("RBAC"))
    OAUTH_PROVIDERS = [
        {
            "name": "github",
            "icon": "fa-github",
            "token_key": "access_token",
            "remote_app": {
                "client_id": conf.get("github_enterprise", "client_id"),
                "client_secret": conf.get("github_enterprise", "client_secret"),
                "api_base_url": "https://api.github.com",
                "client_kwargs": {"scope": "read:user, read:org"},
                "access_token_url":
                  "https://github.com/login/oauth/access_token",
                "authorize_url": "https://github.com/login/oauth/authorize",
                "request_token_url": None,
            },
        },
    ]


    class GithubAuthoriser(AirflowSecurityManager):
        def get_oauth_user_info(self, provider, resp):
            remote_app = self.appbuilder.sm.oauth_remotes[provider]
            me = remote_app.get("user")
            user_data = me.json()
            username = user_data.get("login")
            try:
              role_keys = [RBAC[username]["platform_role"]]
            except KeyError as e:
              logging.error(f"Permission denied to user {username}")
              raise Exception(e)
            return {
              "username": user_data.get("login"),
              "role_keys": role_keys
            }


    SECURITY_MANAGER_CLASS = GithubAuthoriser
dags:
  gitSync:
    enabled: true
    repo: "<this value is overriden by terraform/helm_releases.tf>"
    branch: "<this value is overriden by terraform/helm_releases.tf>"
    subPath: "<this value is overriden by terraform/helm_releases.tf>"
